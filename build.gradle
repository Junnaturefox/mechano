// this stuff is just for gradle plugins - mod dependencies are below
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: true
        classpath "org.parchmentmc:librarian:${librarian_version}"
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}

// apply gradle plugins
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
jarJar.enable()


// 
version = "${minecraft_version}-0.1"
group = 'com.quattage.mechano'
archivesBaseName = 'mechano'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'mechano'
            property 'terminal.jline', 'true' // colors :)

            mods {
                mechano {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'mechano'
            property 'terminal.jline', 'true' // colors :)

            mods {
                mechano {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'mechano'

            mods {
                mechano {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'terminal.jline', 'true'
            args '--mod', 'mechano', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'create'

            mods {
                mechano {
                    source sourceSets.main
                }
            }
        }
    }
}

// include resources generated by datagen
sourceSets.main.resources { 
    srcDir 'src/generated/resources' 
    exclude '.cache/'
}

mixin {
    add sourceSets.main, "mechano.refmap.json"
    config "mechano.mixins.json"
    debug.export = true
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// repos to look for mod dependencies in 
repositories {
    maven {
		name = "Jared's maven"                            // new JEI place
		url = "https://maven.blamejared.com/"
	}
	maven {
		name = "ModMaven"                                 // JEI Mirror, Mekanism
		url = "https://modmaven.dev"
	}
    maven {
        name 'blamejared'                                 // vazkii's
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'tterrag maven'                              // Registrate/Flywheel/Create
        url 'https://maven.tterrag.com'
    }
    maven {
        url 'https://www.cursemaven.com'                  // Misc
        content {
            includeGroup "curse.maven"
        }
    }
    maven { 
        name 'geckolib'                                  //Geckolib
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' 
    }
}

// the good shit
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // All of Create
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }

    // JEI local runtime and API to compile against
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))

    // Geckolib
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "mechano",
                "Specification-Vendor"    : "quattage",
                "Specification-Version"   : "1", 
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "quattage",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}